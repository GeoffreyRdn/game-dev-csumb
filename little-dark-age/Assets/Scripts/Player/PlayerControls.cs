//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Ground"",
            ""id"": ""8c20ad5a-a41a-475a-94cd-832dc173363f"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""f124e4ba-99fe-4903-92be-a9c66151a9a7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""49216c18-dd7c-41d6-9a77-2ae1d80e0b14"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""54de59de-6b7b-49b0-9ac6-f92fbf11a397"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""456a3aca-6434-4605-85ab-b1747a465fde"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""d83d3c27-423c-4655-92aa-3f7d4b54e927"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""5fbcb8c9-44df-4a15-81fb-95d976eba0ee"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shield"",
                    ""type"": ""Button"",
                    ""id"": ""dfe023be-5bb4-4127-b954-eefcd7e9b838"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""0e03c1d6-cb67-4a57-86e3-e6c4da538fd1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenInventory"",
                    ""type"": ""Button"",
                    ""id"": ""8d821789-8da8-409d-a4ba-3e7bc428a04a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BossTP"",
                    ""type"": ""Button"",
                    ""id"": ""d0de9d36-3525-4306-b79f-6c58145bd898"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenPauseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""c1d20410-9e4b-4ef4-a4fa-cbf775e689cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenShop"",
                    ""type"": ""Button"",
                    ""id"": ""099c6e99-8452-44d1-922a-0de8bacfd427"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3f5e97bc-8777-423f-9e7f-990ff6427a24"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ac018aef-3c19-4252-a832-98ee50f16dfa"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""30598213-651a-4c82-91b2-31dad0844e1d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9e3ea846-4f08-4d9a-bb48-bfe15e53a632"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""378f2fa7-53b5-47f8-acca-72c2dbe04c48"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""592cf610-5686-4e1b-aa1a-031cb1b06247"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""742d65a2-3e31-425e-9def-21ef4c5ea0b3"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7dadedfe-2966-4417-a43b-0e76accfa303"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60f061d1-86e1-48da-96b8-87d0053dbda1"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d15fdb5f-7418-438a-954a-19e152876613"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""872fb3fc-0dee-4ddf-a7cc-1df5140d5529"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shield"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8d7ff73-382b-4ca1-9fe6-47ebe99c3b61"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a63d903a-d5a6-4a78-8222-1ce835ea4a14"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcbe1c08-5872-4c5a-92d9-74b9b4f3ce38"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BossTP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4dee3b35-3d51-47d0-ab44-19dd5d6da28a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenPauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""433e9dfb-c910-4ba8-bedb-ccac77cb9d31"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenShop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory"",
            ""id"": ""16df0a4d-66d6-4c9b-9a94-e0cbee57c27b"",
            ""actions"": [
                {
                    ""name"": ""CloseInventory"",
                    ""type"": ""Button"",
                    ""id"": ""0d4a73bf-c213-42c3-ad7e-146eda5f7085"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ResetInventory"",
                    ""type"": ""Button"",
                    ""id"": ""dfda4dd0-3efc-495f-b396-e5b0e3789bf6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e46d8e7c-4a6e-49a0-bb10-c03e045b1f0b"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d357cc2-c674-4a5c-b5d2-f9afb58c4c9b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76072835-2600-4af9-b14e-8592d7df7775"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ResetInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PauseMenu"",
            ""id"": ""918c65ca-5030-4036-a1f2-a88cbc7813b7"",
            ""actions"": [
                {
                    ""name"": ""Resume"",
                    ""type"": ""Button"",
                    ""id"": ""bcb7e879-4dfe-41b7-bf45-0494ffb1bf71"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b12a7c02-df0a-4f7f-8c96-3e96af014647"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Resume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Shop"",
            ""id"": ""714cbf10-28ba-4ce8-bf02-97a4265bbba8"",
            ""actions"": [
                {
                    ""name"": ""CloseShop"",
                    ""type"": ""Button"",
                    ""id"": ""39306f66-9c6c-44f5-9834-35ea425131d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9ce18b9b-e4e9-480b-ad57-9ca9f57194da"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseShop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3faabdb0-b2cb-47ff-9893-767774703162"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseShop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Ground
        m_Ground = asset.FindActionMap("Ground", throwIfNotFound: true);
        m_Ground_Movement = m_Ground.FindAction("Movement", throwIfNotFound: true);
        m_Ground_Jump = m_Ground.FindAction("Jump", throwIfNotFound: true);
        m_Ground_Look = m_Ground.FindAction("Look", throwIfNotFound: true);
        m_Ground_Crouch = m_Ground.FindAction("Crouch", throwIfNotFound: true);
        m_Ground_Run = m_Ground.FindAction("Run", throwIfNotFound: true);
        m_Ground_Rotate = m_Ground.FindAction("Rotate", throwIfNotFound: true);
        m_Ground_Shield = m_Ground.FindAction("Shield", throwIfNotFound: true);
        m_Ground_Attack = m_Ground.FindAction("Attack", throwIfNotFound: true);
        m_Ground_OpenInventory = m_Ground.FindAction("OpenInventory", throwIfNotFound: true);
        m_Ground_BossTP = m_Ground.FindAction("BossTP", throwIfNotFound: true);
        m_Ground_OpenPauseMenu = m_Ground.FindAction("OpenPauseMenu", throwIfNotFound: true);
        m_Ground_OpenShop = m_Ground.FindAction("OpenShop", throwIfNotFound: true);
        // Inventory
        m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
        m_Inventory_CloseInventory = m_Inventory.FindAction("CloseInventory", throwIfNotFound: true);
        m_Inventory_ResetInventory = m_Inventory.FindAction("ResetInventory", throwIfNotFound: true);
        // PauseMenu
        m_PauseMenu = asset.FindActionMap("PauseMenu", throwIfNotFound: true);
        m_PauseMenu_Resume = m_PauseMenu.FindAction("Resume", throwIfNotFound: true);
        // Shop
        m_Shop = asset.FindActionMap("Shop", throwIfNotFound: true);
        m_Shop_CloseShop = m_Shop.FindAction("CloseShop", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ground
    private readonly InputActionMap m_Ground;
    private IGroundActions m_GroundActionsCallbackInterface;
    private readonly InputAction m_Ground_Movement;
    private readonly InputAction m_Ground_Jump;
    private readonly InputAction m_Ground_Look;
    private readonly InputAction m_Ground_Crouch;
    private readonly InputAction m_Ground_Run;
    private readonly InputAction m_Ground_Rotate;
    private readonly InputAction m_Ground_Shield;
    private readonly InputAction m_Ground_Attack;
    private readonly InputAction m_Ground_OpenInventory;
    private readonly InputAction m_Ground_BossTP;
    private readonly InputAction m_Ground_OpenPauseMenu;
    private readonly InputAction m_Ground_OpenShop;
    public struct GroundActions
    {
        private @PlayerControls m_Wrapper;
        public GroundActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Ground_Movement;
        public InputAction @Jump => m_Wrapper.m_Ground_Jump;
        public InputAction @Look => m_Wrapper.m_Ground_Look;
        public InputAction @Crouch => m_Wrapper.m_Ground_Crouch;
        public InputAction @Run => m_Wrapper.m_Ground_Run;
        public InputAction @Rotate => m_Wrapper.m_Ground_Rotate;
        public InputAction @Shield => m_Wrapper.m_Ground_Shield;
        public InputAction @Attack => m_Wrapper.m_Ground_Attack;
        public InputAction @OpenInventory => m_Wrapper.m_Ground_OpenInventory;
        public InputAction @BossTP => m_Wrapper.m_Ground_BossTP;
        public InputAction @OpenPauseMenu => m_Wrapper.m_Ground_OpenPauseMenu;
        public InputAction @OpenShop => m_Wrapper.m_Ground_OpenShop;
        public InputActionMap Get() { return m_Wrapper.m_Ground; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GroundActions set) { return set.Get(); }
        public void SetCallbacks(IGroundActions instance)
        {
            if (m_Wrapper.m_GroundActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_GroundActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_GroundActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_GroundActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_GroundActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_GroundActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_GroundActionsCallbackInterface.OnJump;
                @Look.started -= m_Wrapper.m_GroundActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_GroundActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_GroundActionsCallbackInterface.OnLook;
                @Crouch.started -= m_Wrapper.m_GroundActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_GroundActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_GroundActionsCallbackInterface.OnCrouch;
                @Run.started -= m_Wrapper.m_GroundActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_GroundActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_GroundActionsCallbackInterface.OnRun;
                @Rotate.started -= m_Wrapper.m_GroundActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_GroundActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_GroundActionsCallbackInterface.OnRotate;
                @Shield.started -= m_Wrapper.m_GroundActionsCallbackInterface.OnShield;
                @Shield.performed -= m_Wrapper.m_GroundActionsCallbackInterface.OnShield;
                @Shield.canceled -= m_Wrapper.m_GroundActionsCallbackInterface.OnShield;
                @Attack.started -= m_Wrapper.m_GroundActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_GroundActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_GroundActionsCallbackInterface.OnAttack;
                @OpenInventory.started -= m_Wrapper.m_GroundActionsCallbackInterface.OnOpenInventory;
                @OpenInventory.performed -= m_Wrapper.m_GroundActionsCallbackInterface.OnOpenInventory;
                @OpenInventory.canceled -= m_Wrapper.m_GroundActionsCallbackInterface.OnOpenInventory;
                @BossTP.started -= m_Wrapper.m_GroundActionsCallbackInterface.OnBossTP;
                @BossTP.performed -= m_Wrapper.m_GroundActionsCallbackInterface.OnBossTP;
                @BossTP.canceled -= m_Wrapper.m_GroundActionsCallbackInterface.OnBossTP;
                @OpenPauseMenu.started -= m_Wrapper.m_GroundActionsCallbackInterface.OnOpenPauseMenu;
                @OpenPauseMenu.performed -= m_Wrapper.m_GroundActionsCallbackInterface.OnOpenPauseMenu;
                @OpenPauseMenu.canceled -= m_Wrapper.m_GroundActionsCallbackInterface.OnOpenPauseMenu;
                @OpenShop.started -= m_Wrapper.m_GroundActionsCallbackInterface.OnOpenShop;
                @OpenShop.performed -= m_Wrapper.m_GroundActionsCallbackInterface.OnOpenShop;
                @OpenShop.canceled -= m_Wrapper.m_GroundActionsCallbackInterface.OnOpenShop;
            }
            m_Wrapper.m_GroundActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Shield.started += instance.OnShield;
                @Shield.performed += instance.OnShield;
                @Shield.canceled += instance.OnShield;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @OpenInventory.started += instance.OnOpenInventory;
                @OpenInventory.performed += instance.OnOpenInventory;
                @OpenInventory.canceled += instance.OnOpenInventory;
                @BossTP.started += instance.OnBossTP;
                @BossTP.performed += instance.OnBossTP;
                @BossTP.canceled += instance.OnBossTP;
                @OpenPauseMenu.started += instance.OnOpenPauseMenu;
                @OpenPauseMenu.performed += instance.OnOpenPauseMenu;
                @OpenPauseMenu.canceled += instance.OnOpenPauseMenu;
                @OpenShop.started += instance.OnOpenShop;
                @OpenShop.performed += instance.OnOpenShop;
                @OpenShop.canceled += instance.OnOpenShop;
            }
        }
    }
    public GroundActions @Ground => new GroundActions(this);

    // Inventory
    private readonly InputActionMap m_Inventory;
    private IInventoryActions m_InventoryActionsCallbackInterface;
    private readonly InputAction m_Inventory_CloseInventory;
    private readonly InputAction m_Inventory_ResetInventory;
    public struct InventoryActions
    {
        private @PlayerControls m_Wrapper;
        public InventoryActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseInventory => m_Wrapper.m_Inventory_CloseInventory;
        public InputAction @ResetInventory => m_Wrapper.m_Inventory_ResetInventory;
        public InputActionMap Get() { return m_Wrapper.m_Inventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        public void SetCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterface != null)
            {
                @CloseInventory.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnCloseInventory;
                @CloseInventory.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnCloseInventory;
                @CloseInventory.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnCloseInventory;
                @ResetInventory.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnResetInventory;
                @ResetInventory.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnResetInventory;
                @ResetInventory.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnResetInventory;
            }
            m_Wrapper.m_InventoryActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CloseInventory.started += instance.OnCloseInventory;
                @CloseInventory.performed += instance.OnCloseInventory;
                @CloseInventory.canceled += instance.OnCloseInventory;
                @ResetInventory.started += instance.OnResetInventory;
                @ResetInventory.performed += instance.OnResetInventory;
                @ResetInventory.canceled += instance.OnResetInventory;
            }
        }
    }
    public InventoryActions @Inventory => new InventoryActions(this);

    // PauseMenu
    private readonly InputActionMap m_PauseMenu;
    private IPauseMenuActions m_PauseMenuActionsCallbackInterface;
    private readonly InputAction m_PauseMenu_Resume;
    public struct PauseMenuActions
    {
        private @PlayerControls m_Wrapper;
        public PauseMenuActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Resume => m_Wrapper.m_PauseMenu_Resume;
        public InputActionMap Get() { return m_Wrapper.m_PauseMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseMenuActions set) { return set.Get(); }
        public void SetCallbacks(IPauseMenuActions instance)
        {
            if (m_Wrapper.m_PauseMenuActionsCallbackInterface != null)
            {
                @Resume.started -= m_Wrapper.m_PauseMenuActionsCallbackInterface.OnResume;
                @Resume.performed -= m_Wrapper.m_PauseMenuActionsCallbackInterface.OnResume;
                @Resume.canceled -= m_Wrapper.m_PauseMenuActionsCallbackInterface.OnResume;
            }
            m_Wrapper.m_PauseMenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Resume.started += instance.OnResume;
                @Resume.performed += instance.OnResume;
                @Resume.canceled += instance.OnResume;
            }
        }
    }
    public PauseMenuActions @PauseMenu => new PauseMenuActions(this);

    // Shop
    private readonly InputActionMap m_Shop;
    private IShopActions m_ShopActionsCallbackInterface;
    private readonly InputAction m_Shop_CloseShop;
    public struct ShopActions
    {
        private @PlayerControls m_Wrapper;
        public ShopActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseShop => m_Wrapper.m_Shop_CloseShop;
        public InputActionMap Get() { return m_Wrapper.m_Shop; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShopActions set) { return set.Get(); }
        public void SetCallbacks(IShopActions instance)
        {
            if (m_Wrapper.m_ShopActionsCallbackInterface != null)
            {
                @CloseShop.started -= m_Wrapper.m_ShopActionsCallbackInterface.OnCloseShop;
                @CloseShop.performed -= m_Wrapper.m_ShopActionsCallbackInterface.OnCloseShop;
                @CloseShop.canceled -= m_Wrapper.m_ShopActionsCallbackInterface.OnCloseShop;
            }
            m_Wrapper.m_ShopActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CloseShop.started += instance.OnCloseShop;
                @CloseShop.performed += instance.OnCloseShop;
                @CloseShop.canceled += instance.OnCloseShop;
            }
        }
    }
    public ShopActions @Shop => new ShopActions(this);
    public interface IGroundActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnShield(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnOpenInventory(InputAction.CallbackContext context);
        void OnBossTP(InputAction.CallbackContext context);
        void OnOpenPauseMenu(InputAction.CallbackContext context);
        void OnOpenShop(InputAction.CallbackContext context);
    }
    public interface IInventoryActions
    {
        void OnCloseInventory(InputAction.CallbackContext context);
        void OnResetInventory(InputAction.CallbackContext context);
    }
    public interface IPauseMenuActions
    {
        void OnResume(InputAction.CallbackContext context);
    }
    public interface IShopActions
    {
        void OnCloseShop(InputAction.CallbackContext context);
    }
}
